1.	문제 해결 기본: Array

1)	표준 입출력

-	System.in	(이 두개를 가장 많이 사용함)
-	System.out
-	System.err

2)	표준 입출력의 대상 변경

-	System.setOut()
-	System.setErr()
-	System.setIn()
  => 스트림 변경 가능
  
3)	Scanner

-	Java.util.Scanner	=> 마치 helper와 같은 대상
-	파일, 입력 스트림 등에서 데이터를 읽어 구분자로 토큰화 하고 다양한 타입으로 형변환하여 리턴해주는 클래스
-	Scanner(File source)
-	Scanner(InputStream source)
-	Scanner(String source)
-	입력 스트림을 다루는 방법을 몰라도 손쉽게 입력 처리 가능.
-	데이터 형 변환으로 인한 편리함.
-	대량의 데이터 처리시 수행시간이 비효율적임 -> 데이터 많을 땐 BufferedReader 
-	주요 메소드
   nextInt(): int 타입 반환, White space(space,tab,newline) 만나면 종료
   nextDouble(): double 타입 반환, White space 만나면 종료
   next(): 문자열 반환, White space 만나면 종료
   nextLine(): 문자열 반환, 개행(Enter) 만나면 종료, next()와 달리 문자열 안에 띄어쓰기 가능함.(공백포함가능)
   ex) 10_ _ _ abc   : sc.nextInt()로 한번 정수 얻고, 공백 포함안하니까 sc.next() 가능
-	구분자 아닌애 나올때까지 계속 읽어들임.

4) BufferedReader 

- java.io.BufferedReader
- 필터 스트림 유형
- 줄(line) 단위로 문자열 처리 기능 제공 -> readLine()
- 대량의 데이터 처리 시 수행시간 효율적임. (30% 속도 개선)

ex) BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
-> 받아 들여서 InputStreamReader 필터를 한번 거침.
System.in -> byte 단위, BufferedReader -> char 단위. 따라서
InputStreamReader 로 byte -> char 형변환을 해줌.

ex) abcd 이어서 들어오는 경우
char[] 에 저장후 charAt(index_number) 를 이용할 수 있음

ex) ab cd 구분자와 함께 들어오는 겨웅
StringTokenizer 사용 가능
StringTokenizer st = new StringTokenizer(in.readLine(), " "); -> String 형태로 하나하나 들어옴

만약에 숫자를 받았다면? 12345
int i = Integer.parseInt(st.nextToken()); 

5) StringBuilder  

- java.lang.StringBuilder
- 문자열의 조작을 지원하는 클래스
- 자바에서 상수로 취급되는 문자열을 조작 시마다 새로운 문자열이 생성되는 것을 방지해줌
- append(),  toString

- 테스트 케이스 한번 끝날때마다 System.out  으로 출력하지 않고, 모두 모아놨다가
모든 테스트 케이스가 종료되었을때 StringBuilder에 모아놓았던 것을 출력하면 출력 속도 개선됨.

- 문장 뒤 두글자 빼고 출력하고 싶으면
sb.setLengh(sb.length() -2);
System.out..println(sb.toString());

6) StringBuffer -> -> 자바 프로그램 병행처리 되는 멀티쓰레드 제공. 여러 쓰레드가 동시에 접근할때 안전하게 처리해주는 동기화 코드 제공.
-  계속 누가 쓰고 있는지? 체크해야 하기 때문에 싱글 스레드 환경인 경우에는 성능상 불리함.


2. SW 문제해결

1) SW 문제 해결 역량이란 무엇인가?

- 프로그램을 하기 위한 많은 제약 조건과 요구사항을 이해하고 최선의 방법을 찾아내는 능력
- 프로그래머가 사용하는 언어나 라이브러리, 자료구조, 알고리즘에 대한 지식을 적재적소에 퍼즐을 배치하듯 이들을 연결하여 큰 그림을 만드는 능력
- 문제 해결 역량 = 추상적인 기술
- 무작정 알고리즘을 암기하고 문제를 풀어본다고 향상되지 않는다.
- 문제 해결 역량을 향상시키기 위해서 훈련이 필요함.
- 문제를 많이 풀어보고 해석할 수 있는 능력.

<문제 해결 과정>
① 문제를 읽고 이해한다.
② 문제를 익숙한 용어로 재정의한다.
③ 어떻게 해결할지 계획을 세운다.
④ 계획을 검증한다.
⑤ 프로그램으로 구현한다.
⑥ 어떻게 풀었는지 돌아보고, 개선할 방법 찾는다. (최적화)

<무엇이 좋은 알고리즘인가?>
- 정확성, 작업량(적은연산으로 원하는 결과 냄), 메모리 사용량, 단순성, 최적성


2) 알고리즘 성능

- 복잡도의 점근적 표기
- 시간(또는 공간)복잡도는 입력 크기에 대한 함수로 표기하는데, 이 함수는 주로 여러 개의 항을 가지는 다항식이다.
- 이를 단순한 함수로 표현하기 위해 점근적 표기(Asymptotic Notation)를 사용한다.
- 입력 크기 n이 무한대로 커질 때의 복잡도를 간단히 표현하기 위해 사용하는 표기법.

- 빅-오(O) 표기법
- 시간 복잡도 함수 중에서 가장 큰 영향력을 주는 n에 대한 항만을 표시
- 계수(Codfficient)는 생략하여 표시

ex) O(3n+2) = O(3n) -> 최고차항만 선택 -> O(n) -> 계수 제거
ex) O(2n^2 + 10n + 100) = O(n^2)
    O(4) = O(1)

O(nlogn) 까지 해도 매우 효율적인 알고리즘ㅇ.ㅁ
일반적으로 O(n^2), O(2^n) 까지 나오기도 함.

- O(1) > O(logn) > O(n) > O(nlogn) > O(n^2) > O(2^n) > O(n!)

1억번의 연산 = 대략 1초


3) 일차원 배열

- 배열이란? 일정한 자료형의 변수들을 하나의 이름으로 열거하여 사용하는 자료구조
- 자바에서는 배열을 객체 취급함.

 int num0, int num1, int num2, int num3, int num4, ... int num7 
 => int[] num = new int[8];
 

4. 반복(Iteration) 과 재귀(Recursion)

- 반복과 재귀는 유사한 작업수행함.
- 반복은 수행하는 작업이 완료될 때까지 계속 반복

- 재귀는 주어진 문제의 해를 구하기 위해 동일하면서 더 작은 문제의 해를 이용하는 방법
- 하나의 큰 문제를 해결할 수 있는(해결하기 쉬운) 더 작은 문제로 쪼개고 결과들을 결합함
- 재귀 함수로 구현.



5. 재귀함수(recursive function)

- 함수 내부에서 직접 혹은 간접적으로 자신을 호출하는 함수
- 재귀적 정의를 이용해 재귀 함수 구현

- 기본 부분(basis part) + 유도파트(inductive part) 로 구성
- 함수 호출은 프로그램 메모리 구조에서 스택을 사용함
- 따라서 재귀 호출은 반복적인 스택의 사용을 의미하며
- 메모리 및 속도에서 성능저하가 발생함

- 팩토리얼 재귀 함수
  * 재귀적 정의
  Basis rule:
    N <= 1 인 경우, n = 1
  Inductive rule:
    N > 1, n! = n X (n -1)!
   
   * n!에 대한 재귀함수
   int fact(int n)
   {
    if(n <= 1)      // Basis part
      return 1;
      
    else            // Inductive part
      return n* fact(n-1);
    }


6. 재귀 호출

- 이전의 두 수 합을 다음 항으로 하는 수열을 피보나치라 한다.
0, 1, 1, 2, 3, 5, 8, 13, ...

- 피보나치 수열의 i번째 값을 계산하는 함수 F를 정의하면 다음과 같다.
F0 = 0, F1 = 1
Fi = Fi-1 + Fi-2 (for i>=2)

- 위의 정의로부터 피보나치 수열의  i번째 항을 반환하는 함수를 재귀함수로 구현할 수 있다.
- 피보나치 수를 구하는 재귀함수

fibo(n) 
  if(n <= 1) then
      return n;
  else
      return fibo(n-1) + fibo(n-2);
end fibo(n)

그러나, 피보나치 수를 구하는 함수를 재귀함수로 구현한 알고리즘은 "엄청난 중복 호출"이 있다.
=> 개선책: Memoization


7. Memoization
- 메모이제이션(memoization)은 컴퓨터 프로그램을 실행할 때 이전에 계산한 값을 메모리에 저장해서 매번 다시 계산하지 않도록 하여 전체적인 실행 속도를 빠르게 하는 기술.
- 동적 계획법의 핵심이 되는 기술이다!!! 
- 앞의 예에서 피보나치 수를 구하는 알고리즘에서 fibo(n)의 값을 계산하자마자 저장하면(memoize), 실행시간을 O(n)으로 줄일 수 있다.

ex)
fibo(n)
  if n>=2 and memo[n] is zero then
    memo[n] <- fibo(n-1) + fibo(n-2);
  return memo[n];
end fibo()


8. 반복 또는 재귀?
- 재귀는 문제 해결을 위한 알고리즘 설계가 간단하고 자연스럽다.
- 일반적으로 재귀는 반복보다 더 많은 메모리와 연산을 필요로 한다.
- 입력 값 n이 커질수록 재귀 알고리즘은 반복에 비해 비효율적일 수 있다.


9. 재귀호출 응용

<하노이의 탑 문제>
- 하노이의 탑 게임은 세 개의 기둥과 서로 다른 크기의 N개의 원판으로 구성된다.
- 원판을 세 번째로 모두 옮겨 놓아야 한다.
- 원판을 옮길 때는 반드시 한 번에 한 개씩 옮길 수 있고 두 번째 기둥을 이용할 수 있다.
- 옮기는 과정에서 절대로 큰 원판이 작은 원판 위에 놓이지 않아야 한다.

n-1 개 원판 -> 임시기둥 move
n 번째 원판 -> 목적기둥 move
n-1 원판 -> 목적기둥 move









